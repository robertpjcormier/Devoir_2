#Probleme A1: Ouvrir un fichier FASTA

from Bio import SeqIO

for record in SeqIO.parse("C:/Python_Files/DevoirA1.fasta","fasta"):
    print(record.seq)

#Probleme A2: Retourner le reverse complement de la sequence

from Bio import SeqIO
def find_complement(sequence): #Start function
    for record in SeqIO.parse(sequence, "fasta"): # Set up pour ouvrir le fasta
        new_string=[] #New list
        for i in record.seq: #Start loop sur la sequence du FASTA avec record.seq
            if i == 'T':
                new_string.append('A') # 4x le pairing de chaque base
            elif i == 'A':
                new_string.append('T')
            elif i == 'G':
                new_string.append('C')
            elif i == 'C':
                new_string.append('G')
            else:
                print("Please no")
                new_string = None
                break
        try:
            return(''.join(new_string)[::-1]) #Reverse la function
        except:
            pass

comp=find_complement("C:/Python_Files/DevoirA2.fasta")
print(comp)

#Reponse: AGGCCCCGACTGCAAGGGGCGTTTCAACTGAAATAGCGCAACGCATGGGCGACTGGCCCATACGCTAGGGGGCGAGGCATACCGTGTCGCTGCTCGCAGAGTAGCCCAACCATGCATTTCGAAAGTTGGTCCTCGCAGTCGAAGGGACCTACGCGAGCACGAAATATAGGGAACGGCCCTACGGCAGATCTGGGAATACGGAACACACAACCGTCTCCCTTGCCGAAGATTATGGCACTCCTAACTCGTAGTGCTACGGAGTGAGAAGACAGCGCAACGGACAACTCGAAGCGAGTTGACGAGATCACATCGCTTCCCAACATGCGTCTGTCAGCGCATTCCGTGGTGTGGAGAGTTACTTACAATGGCCTTAATCCATGCCTTTTAATGCACATATGTTTGGCGGCAGGAATCTGTGGGCTGCTTGCCCCTCTCGTGTTCATGAGGTGTTCTTAATTAGTAGCACCACCGAGAACCATTCCCCCTCCTATAGTGCTCGGTGGTGTCGTATGATGCAATACCAGAAATGTAGAGAGCTTACCATGAGTGCTGGTGCCCTTCGGTGTGTGGTACGGAGCCATGCGTCTCACAGAAGTACCGAGGTCTCTTTTTGTGACTGTCGACTAGGGATCCCATAAACAAGTGCGATTGCTTCTCGGCTTAGGCTACCTGGAATCAATGCTGTACGCCTCTTACTAAGTGGTTAGGAACTTCATATGTTAGAACATGAAAATCACATAAGCGTCAATCATGGTCTAGCCAGTTTCAAGCAAATAACCACCGCGGGAGCCATGATGGACCGCTGAGTGCTTGAGAATTATCGTGCAATCAGTTGGCTACACGTATCAGCCAACACAATAACCAGAGCGATCTGAGTCCTCCACTCTAACAGGTTCCCACTGTCCCTCAGCTGACTGCAGTCACTAGCGGGTGACTGACTAGCTGATCCACCTGTCGGTACCCAGGGGGGGGGTGGGCTAGCTCAGTGTGAGCTCTATAAT


# Probleme A3: Lisez un FASTQ qui traduit la sequence d'ARN en acides amines

seq3 = "AUGACUGCCGAACUUCGGAUCGCGGCGAGCAGUAGACACAUAUUAACCACUUGCCGUUUUAGGUACGCACUAAAGGCAACCUGGUCCUUGCGCGCACGCUGUGUUGCACGCCAGCGUCGCCAACUUCAUCCUGAGGACAGAUGGGUCGACUUUCCACUGCUGUUCAAUCCUCCGAUCGGAUACCAGUCAAUCAUAGCCUCCUUCUUGAACCGGUCCGAGGAGCGGGAUAGUCCUGCUGUGUGUGGACCCCUAUUCGGUUCGAUACGCCAUGUGAACAGUAAGUGGCCGGCCUUCAGAUUGAGGCUGGAUGCCACUCGCGAUUAUUCUCAGGGCCAGGGAAUGCUAUCUAGUGUUCGUAAAUUAUGCCGAGCCAUGGCAAUGUGUCUACUAUCCGUCAGGAGGCAGGUGGUGGCCCUGUGUAAAGUGACAGUUGAGGGUCCAUCGGACGUCAAGUUCUACGGGAACAUCCUCGUGAGCCGAUCGUGCGUCUGUGAGGACGAACCAGUACACGAUGGGGGAAAAACGCUCUCACACCUUGAGUUUGUGCUGCAAACGGAGCAAGGUCCUCUCAGAGGCAACGUUGAUGACUCACUUAAACGGGUGGUAGCAGCAUGUACGGACUUGCUUCGGCGUCGACUGUUUUCCCAAUUAACACGUACCGUACAAAAUACGGGGGCCAGCUCUCAAAUCUUACCGCCACACUACGACUUCACUAGAUCCGCCGUGAAUUCAACCGACGCUCAUCUCGUGCGUGUUUACGGAGGUGCACUGAUAUCCGUCUUACGGCACGCCGGGCUUACUAUCUUAAGGUCUCUUGUGAUGACAAAAAGCUUAGAACAGGCCCAUGGCCAUUCCAUUAGUGUGGCGACGACACGGCUACCGAUAGUUACUCCUAGUGCUUUCGUUGUCGCAUUGCAUGACGAUCGCUUACGGACGAACGACACACGAAAGGAUGGCCAGCGCAACCGCUCCAGGGCGUCACGAUACUCAAUGUUCGCAUCCUACUCCGUUACUAGACUUACGAAUGAGAGCCGCAUCCCACGGUCCGGCAAGCUCGUCGGGCCCCCUACAGGUUGGGUAAUACUUACCGCACAGGAAACGCAUGUUUUUGACCCGCUGGCUGCGCACCGAACCAGCUAUGGAUCUGACAAUAGGGCAAGGAUGAAGUGCAUUCUGCCCCCCGGAUGCCCAUAUCGUCACCAGGAUUGGGUUGUGCAUGACUUCGGACCAAACUUAGCUCAACAAGAGAUCUCUUUACAAGUUGAGCACACAAUCGACUUAGAGAAGGGACUCCGAAAAACAUAUCUCAAGCGUAUGUGUCGUGUCGAAGCUACAUGUGGACUUCUAUACCAACGUUGCAAUGGUCCGCAUCCUGUGAAGGCUGAACGGCAAUGCAUAAUAGACGAGAUGAUUAGGAUGUUACAUGGACACCCGAGGCGUCGGGGCUGUUCAAGGGGCUUUAGGAUCUUCGCGAUUAACAUUAACCCACAGGUGUGGAGCUCCGCAUGUCAACAUAGAUCUAGGCUGUGGAACUUACACCCCGUUAGGAUGAGGUCGCAGCUCAAGAUCAACAGGACGUGGCAUCAUGAUAGUCGUCGAAUGAUUGUUCGCUGGUUUCCUUAUACAAAGCCACCUACACGGACCGGUGGCGGUGACUCAUCGAUGCAACAUACCAGGAGCUGUAUCUACUUUAACCCGAGACUACCACAUACCUGGUGGAUUUGUCAAGAUGGGGAAGGGUUGCUUAUUGGGUCGGUAAUCGUACCGAGCCAGAUUAGGGACCCCCGUUUGGCAGAUCUCGCAACCGUGACUUCAAUAUAUACAACCAGAGGUUUAGGAACAACGUCUCUCUCCAAUCCGAGGGAUCUUACCAGCAAGCGAGCCCCCUUACCACUGGUACUAUCAUGUCGUUCCCUAAGAGCCGAUGCUGAAAAGCAGAGCGCAGCCUUCGCACUGCAGAUAGUACGAGUGGCCGACAGCCAAACCGGCUCUGGAAGGGGAGUCUCUUUUAUUGAAGCGGUUAACGCAGAAACUGGCGGGCGCCAAUCACGCGGCGCAUACGGACCACGACACCCAGCCCUGUCGACCUUCAUUCUAGAGGUUAUUGUCAAGUUUACGGUUGCUGUCCUAAAGUGUGGUAGUUGUGCUGUCUCAUCGCUUUCAAUGAACCCCAUAAUGACGGCCGAAUUUGGCCAUUGGGUGGUGCGGACUACAACCAGCAAGUCGGGGAGCGCUAGACGACAGUACCAAUUAACGCAAGGCCAGCGUACGGUUCACAGAGCUAUCUUUACUAUUUUAGAAGACGCAAGGAGAUGUCCAGUCGAAAGUCCACCGUCAGCUAUGGUCGAAUACAAUGGUUCUAUCGUUAUUUCGCGUAAUCGGUUCUCGCCGACCUUUACACGUCUCAACGGACUAGCGUGGGCCAGCGGUUCCAACGUAGUUUCUAGACACAACGCGGGUACUUCGAGCUGUACCAGUUCUACCACGGCGCAAACAUCUGUGAAAAUCUCUACGAUACAGCAGAAUGAUGCAUUUAUGUCGAUCUUGAGAUAUGUACAAGUGCCGCUCAGAAGCGCAUUUAAGUAUAACGGUGGUACUUGCGCAUACAACCCCGACUCCGACUCAAGCCUGUGCGAACGGUCGGGGAGUGCUCGACCACGUACCCAUCAAUAUAGGCAACAAAAAGAUCCCUGUCUCCGAACAGGAGUCGAGAUCAGAGAGGAUGCUAGGAGGAAAGCUCUAUCAACUCCGCAAGAUAGUACUUUCCAAUGCUUACGUCUCGUGGCGGACGUGCUGCACGUACGCGGCUGUCGGGUGUCUCGAAAAGGCCUGUUCCUAAUUAAAGUGUGGUUCCGGACAAUCGCCAUUGCGACAGUUAGGACAAGUGAGUGCUGUGCUUCUUCGUCCAACCGCUGUCUUCCUGAGUGUUCGGAGAGGGUCCAUGCCUCGCCGCGGAGAAGUACACCACAAGGGCGCGUAGCCCUCAUAGAUUGCCUAGAACACUCUCGCGUCUUAAGCGGUCGCGACGCAUAUCGUCGUCUCGGACUCUCAAGGCGGGCGAUCGGGACGGCUCAGGAAAUUAGCUGGCCAAUCAUAUUUUCUUCCGGCUGUUUUCCCAUUAGAAAGCAGUUUCGAAACUCGCGGGCCGAACCGACCGACGUAUUGGGCACACGGACUUUCCACUGUUUCAAACCUCGCUCGACUGCUGACCUUUUGCCGUUAACAGAUUACCAUGUCUUGUCGGGAAUGCAUACGGAUUUUUAUAUGCACUGUAGCCUUGUGAGGUUGCGAAGUAUACAGUACCACGCACGAGGCCUUAUUGCCAAAGAGGGGAGUUAUAGUCCGGUUGUAAAUACUAGCCAUAUAUUGCCUAGACCUCGUGGAUCGGUGCACUUGAGAGAUCCGAAUGAGAGUGUCGACGUUCAGCGAUCUUGGCCUAUGAGUAACGCAUCUGGCCGUGUGACCCGACAUCCCAAAGAAUAUUUCUGCGGGGUAACUGAGAGACACCGUUCUAGAGGAGACUCUCGUAGUCAUUCUGUCACUUCGAACGAAAUUCAGGUCCAAUCAGGCCUGAGUGCGGUUCCGCCGCUCCCGUUAUCCGCCGUAUACGGAUCUUGUUCGAUGUGUUUAUGGCAGAUCCGGCUCGAGACGACUCACUGGAAUAACGCGUCUGUCUACCCGUCCUCUGGACGGUUUAAAAUGACUGCUGUCUUAUCCCGUUUUGCGCCAGUGGAGCGUCGUCUGCAUGAGCUAGUAGUGGAUUACUCAUAUUAUACCGGUAGCAUCGGAUGUUUGUCUCAUCCGUACUUGCCUUCUCUUAUACUAACCAGAGGAUACCCUUCGGGGACUCUUGGUAGUCCCACCAUCUCGAAUUACGGUGAGGCAGAGUCAAUUGACGGUAAGCUAUAUAGGACAACUGUCAUGGUCCCCACACAGUUGAUGUGCCCGUAUAGGGCCAAUAGCGCUCCGAAUGCUACAUGCAGUGCCUAUUCCAAAGCUGGCUUGGGAGUUUUCCAAAAAAAUAGCCUAGUCAAAUCACGAGAUCAGGUAAAGACAACGUCCUGCAUGACCCAGAGUGUCCUCCGAUCUGCCGCUGCAUUGCGCAACUGUCACCGCGCUGAGGGGCACCCCGCCUCUAACCACGUCCUGCAUGACAUCCGAAUCUUUGACGCUGUAUCCUUGGGAGCCUUCUCGAGCAUCCCAAUCUUAAUCAGCUCCGCUUACUGGACGAUCAAUUCCUCCACUCCAAGGCCCAUCGAUGGCAUUGUAUCUAAACCUUUGUCUUCAUCUCGAAACUUUGGUGGUGUUCGAGUCAGGAUGGUCGUUGCGGGUCUUCGCGUUCCCGCCAGGGCCUGUAUAAGACCACAGGCCCUCCUGCUCGCCCUACCCAUGCGAAGUCUGUUCACGCCACAUCAGGCCUCGGGAUCAUUCCACCUUCGGACGAGGGUCCUAGAGAGGCACUGUGAUACACGUAUGUUACAGACAAUGCCUCAGGUGCGCGCAUUCCUUUUCGGGGUAGUUGACAAGCUGACAGCCAGGUCGCGUUGUUCAUUCGUGCAAACUCAGAUGCUGUUCAUCUGUUCUUGCAUUAUUUUGAGCCGACGCGGCCCGCAUCAUAUUGAAAGUGGGCGAAAACGAACCUCCGAGGUGGGGAAGGCUAAUCGGUGCGUAAUGGCCCAGGGCAUUCAAUACUUUUCCCCCCAUUAUAUGCAACUUGAAACGUGCCCACUACUUGUAUACCGCAACUCCCCAUCUAUAUGGAUCCCCGUGAGGACUUUUGUUACGAAGAGUCAUACACACGGCGUACUGUCGCGGGUCCCUGAGCAUAUCCUGAUACCUAACCGUGCCACCUACUGGAGGAAACCAGGGGAUGGCCGAUGUGGUUGCUCUUCGAAUGCCCUAGAGUUUUGGGUCGUCGGUCGGUGCCUCUGCACUACUAAUUCGCCCGUUCAUGCUUCCCUAUUGCGGCAUACCCCGCUCGGCACCGCAACCAACGAGUUACAUUCGUAUGGGCCCCGCACCUGGGAGCAUUGCGCACCCCUACCAUCUGGUAGCAAUUGUAGCGUCAGUGUCAGAGCGGGCGGGAAUAUGGGAACAAUUCACCGAAAGAUCCCUCCCCCUCUGAUUAGUGGCCAUUCGUGCGUUAAAUUUAUUAGGCACCGACCGCAAUCCACACAUAGCCGAGAAGAUAUCAAGAUGUUGACUCAAGCGCCCCUUGACCUAAUACAACGCUUAGAUUAUUAUGAUGUUAUAAGCAGUGUGAAGCAACCGCUCGAUCGUGCACCGCUGGUCAUUUAUCGUAGUCCUGGAGCUCCUGUCGCGCAGUCGCUGAGCCGGGAUGGUCAGAUCCGACAUCAACACAUUUUAAUCAUCCUGCCAUUAACCGGAUCUUUCCUGAGCGGGCUGGUGACGGAGGUGCGGAUGUCAGUAUUUCUGCAGAUACUUCCCUCGCAACUAUAA"


bases = ['U', 'C', 'A', 'G'] #Prep. le dictionaire pour les codons -> A.A.
codons = [a+b+c for a in bases for b in bases for c in bases]
amino_acids = 'FFLLSSSSYY**CC*WLLLLPPPPHHQQRRRRIIIMTTTTNNKKSSRRVVVVAAAADDEEGGGG'
codon_table = dict(zip(codons, amino_acids))

def translate_rna(seq):
    start = seq.find('AUG')
    peptide = []
    i = start
    while i < len(seq)-2:
        codon = seq[i:i+3]
        a = codon_table[codon]
        if a == '*':
            break
        i += 3
        peptide.append(a)
    return ''.join(peptide)

a=translate_rna(seq3)
print(a)

#Probleme B3

from Bio import SeqIO

def FindMotif(sequence): #Start function
    records=list(SeqIO.parse(sequence,'fasta'))
    sequence=records[0].seq #Define the sequence
    motif=records[1].seq #Define the motif
    occurences=[] #Create new list
    for i in range(len(sequence)):
        if sequence[i:i+9] ==motif:
            occurences.append(i+1)
    return occurences

indexes=FindMotif("C:/Python_Files/DevoirB3.fasta")

print(indexes)

#Probleme C3

def find_variants (sequence): #Start function
    records = list(SeqIO.parse(sequence, 'fasta'))
    sequence1 = records[0].seq  # Define the primary sequence
    sequence2 = records[1].seq  # Define the sequence to compare
    tot_variants=[] #New list
    for i in range(len(sequence1)):
        if sequence1[i] != sequence2[i]:
            tot_variants.append(1) #Add one object to list for each SNP
    return tot_variants
variants=find_variants("C:/Python_Files/DevoirC3.fasta")
print(len(variants)) #Length de la list = # de SNPs

# Probleme C3
def find_variants (sequence): #Start function
    records = list(SeqIO.parse(sequence, 'fasta')) #Create list w/ 2 objects (sequence 1 et 2)
    sequence1 = records[0].seq  # Define the primary sequence
    sequence2 = records[1].seq  # Define the sequence to compare
    y=0
    for i in range(len(sequence1)): #For counting SNPs
        if sequence1[i] != sequence2[i]:
            y=y+1
    return y #Return total SNPs
variants=find_variants("C:/Python_Files/DevoirC3.fasta")
print(variants)


